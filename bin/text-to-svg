#!/usr/bin/env node

/**
 * Copyright (c) 2016 Hideki Shiro
 */

const package = require('../package');
const path = require('path');

const program = require('commander')
  .version(package.version)
  .usage('[options] text')
  .option('-x, --x <n>', 'horizontal offset', parseFloat)
  .option('-y, --y <n>', 'vertical offset', parseFloat)
  .option('-s, --font-size <n>', 'font size', parseFloat)
  .option('-f, --font [value]', 'font')
  .option('-c, --color [value]', 'color')
  .option('-k, --kerning', 'kerning')
  .option('-a, --anchor [value]', 'anchor point')
  .option('-d, --debug', 'debug')
  .parse(process.argv);

if(program.args.length < 1) {
  program.outputHelp();
  process.exit();
}

const text = program.args[0];
let attributes = {};
if (program.color) {
  attributes = {
    fill: program.color
  }
}
const options = {
  x: program.x || 0,
  y: program.y || 0,
  fontSize: program.fontSize || 72,
  kerning: program.kerning,
  anchor: program.anchor || '',
  attributes: attributes
};

const fontsPath = path.join(__dirname, '..', 'fonts');
let font;
if (!program.font) {
  font = path.join(fontsPath, 'SourceHanSerifJP-Light.otf')
} else {
  font = path.join(fontsPath, program.font)
}

const TextToSVG = require('../build');
const textToSVG = TextToSVG.default.loadSync(font);

let svg;
if (!program.debug) {
  svg = textToSVG.getSVG(text, options);
} else {
  svg = textToSVG.getDebugSVG(text, options);
}

console.log(svg);
